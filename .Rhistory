par(mfrow = c(1,2))
plot(ekm, conf.int = F, xlab = "Tempos", ylab = "S(t)")
lines(c(0, sort(unique(claringe$time))), c(1, st_weib), lty = 2)
legend(18, 0.8, lty = c(1,2), c("Kaplan-Meyer", "Weibull"), bty = "n",
cex = 0.8)
plot(ekm, conf.int = F, xlab = "Tempos", ylab = "S(t)")
lines(c(0, sort(unique(claringe$time))), c(1, st_lnorm), lty = 2)
legend(18, 0.8, lty = c(1,2), c("Kaplan-Meyer", "Log-Normal"), bty = "n",
cex = 0.8)
surv_median(st_lnorm)
?survreg
predict(st_exp, type = "quantile", p = .5, newdata = data.frame(1))
surv_median(st_exp)
predict(st_exp, type = "quantile", p = .5, newdata = claringe)
st_exp
surv_median(ajuste_lnorm)$median
surv_median(ajuste_lnorm)
ajuste_lnorm
predict(ajuste_exp, type = "quantile", p = .5, newdata = claringe)
predict(ajuste_exp, type = "quantile", p = .5, newdata = data.frame([1]))
predict(ajuste_exp, type = "quantile", p = .5, newdata = data.frame(1))
predict(ekm type = "quantile", p = .5, newdata = data.frame(1))
predict(ekm, type = "quantile", p = .5, newdata = data.frame(1))
predict(ena, type = "quantile", p = .5, newdata = data.frame(1))
predict(ajuste_lnorm, type = "quantile", p = .5, newdata = data.frame(1))
exp(mu+(sigma^2/2))
predict(ajuste_exp, type = "quantile", p = .5, newdata = data.frame(1))
alpha
1/alpha
alpha
alpha*12
alpha/12
require(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
require(swirl)
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(pollution$pm25)
quantile(ppm)
boxplot(ppm, col = 'blue')
abline(h = 12)
hist(ppm, col = 'green')
rug(ppm)
low
high
hist(ppm, col = 'green', breaks = 100)
rug(ppm)
hist(ppm, col = 'green')
abline(v = 12)
abline(v = 12, lwd = 2)
abline(v = meadian(ppm), col = 'magenta' lwd = 4)
abline(v = median(ppm), col = 'magenta' lwd = 4)
abline(v = median(ppm), col = 'magenta', lwd = 4)
names(pollution)
table(pollution$region)
reg <- table(pollution$region)
reg
barplot(reg)
barplot(reg, col = 'wheat', main = "Number of Counties in Each Region")
boxplot(pm25~region, data = pollution, col = 'red')
par(mfrow=c(2,1),mar=c(4,4,2,1))
east <- subset(pollution, region == 'east')
head(east)
hist(east, col = 'green')
hist(east$pm25, col = 'green')
histogram((subset(pollution, region == 'west'))$regions, col = 'green')
hist((subset(pollution, region == 'west'))$regions, col = 'green')
hist((subset(pollution, region == 'west'))$pm25, col = 'green')
hist(subset(pollution, region == 'west')$pm25, col = 'green')
plot(pollution)
plot(latitude, pm25)
with(pollution, plot(latitude, pm25))
abline(h = 12, lwd = 2, lty 2)
abline(h = 12, lwd = 2, lty = 2)
plot(pollution$latitude, pollution$pm25)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h = 12, lwd = 2, lty = 2)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west <- subset(pollution, region = 'west')
west <- subset(pollution, region == 'west')
plot(west$latitude, west$pm25, main = 'West')
plot(west$latitude, west$pm25, main = 'Eest')
plot(east$latitude, east$pm25, main = "East")
?Devices
a
plot(a)
plot(pollution)
with(faithful, plot(eruptions, waiting))
with(faithful, plot(eruptions, waiting, main = 'Old Faithful Geyser data'))
title(main = "Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png, 'geyserplot.png')
dev.copy(png, file = "geyserplot.png")
dev.off()
head(cars)
which(cars, plot(speed, dist))
with(cars, plot(speed, dist))
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4,1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, data = mpg)
head(airquality)
range(airquality$ozone, na.rm = TRUE)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month, airquality)
dev.off()
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)",col.axis="blue",col.lab="red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)",col.axis="blue",col.lab="red", main = "Ozone and Wind in New York City")
title(main="Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
title("Ozone and Wind in New York City")
length(par())
names(par())
par()$bin
par()$bin
par()$pin
par()$fg
par('pch')
par('lty')
plot(airquality$Wind, airquality$Ozone, type = "n")
title("Wind and Ozone in NYC")
may <- subset(airquality, Month == 5)
plot(may$Wind, may$Ozone, color = 'blue', type = 2)
plot(may$Wind, may$Ozone, col = 'blue', type = 2)
plot(may$Wind, may$Ozone, col = 'blue')
plot(may$Wind, may$Ozone, col = 'blue', pch = 17)
plot(may$Wind,may$Ozone,col='blue,pch=17)
)
a
plot(may$Wind,may$Ozone,col='blue',pch=17)
plot(may$Wind,may$Ozone,col="blue",pch=17)
points(may$Wind,may$Ozone,col="blue",pch=17)
notmay <- subset(airquality, Month != 5)
points(notmay$Wind,notmay$Ozone,col="red",pch=17)
points(notmay$Wind,notmay$Ozone,col="red",pch=8)
legend('topright', c(17,8), c('blue', 'red'), c('May', 'Other Months'))
legend('topright', pch = c(17,8), col = c('blue', 'red'), legend = c('May', 'Other Months'))
abline(v = median(airquality$Wind), lty = 2, lwd = 2)
par(mfrow = c(1,2))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
title("Ozone and Solar Radiation")
plot(airquality$Wind, airquality$Solar, main = "Ozone and Solar Radiation")
plot(airquality$Ozone, airquality$Solar, main = "Ozone and Solar Radiation")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Solar, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City")
mtext("Ozone and Weather in New York City", outer = TRUE)
require(lubridate)
ymd('2020 10 10')
class(ymd('2020 10 10'))
# download and load data
fileUrl <- 'https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip'
download.file(fileUrl,
destfile = './data',
method = 'curl', quiet = T)
setwd("C:/Users/Daniel/Desktop/Coursera JHU/ExData_Plotting1")
# download and load data
fileUrl <- 'https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip'
download.file(fileUrl,
destfile = './data',
method = 'curl', quiet = T)
# download and load data
fileUrl <- 'https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip'
download.file(fileUrl,
destfile = './data/Eletric_data.csv',
method = 'curl', quiet = T)
download.file(fileUrl,
destfile = './Eletric_data.csv',
method = 'curl', quiet = T)
data <- read.csv2('Eletric_data.csv')
data <- read.csv('Eletric_data.csv')
# download and load data
fileUrl <- 'https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip'
download.file(fileUrl,
destfile = './Eletric_data.zip',
method = 'curl', quiet = T)
# download and load data
fileUrl <- 'https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip'
download.file(fileUrl,
destfile = './Eletric_data.zip',
method = 'curl', quiet = T)
if(file.exists('./Eletric_data.zip')) {
# Extract data file
unzip('./Electric_data.zip',
exdir = './')
# Delete original Zip file if it exists
invisible(file.remove('./Electric_data.zip'))
}
if(file.exists('./Eletric_data.zip')) {
# Extract data file
unzip('./Electric_data.zip',
exdir = '.')
# Delete original Zip file if it exists
invisible(file.remove('./Electric_data.zip'))
}
if(file.exists('./Eletric_data.zip')) {
# Extract data file
unzip('Electric_data.zip',
exdir = '.')
# Delete original Zip file if it exists
invisible(file.remove('./Electric_data.zip'))
}
file.exists('./Eletric_data.zip')
unzip('./Electric_data.zip',
exdir = '.')
# Extract data file
unzip('./Electric_data.zip',
exdir = 'a.txt')
# Delete original Zip file if it exists
invisible(file.remove('./Electric_data.zip'))
# Extract data file
unzip('./Electric_data.zip',
exdir = 'a.txt')
# Extract data file
unzip('./Electric_data.zip',
exdir = './')
?unzip
# libraries
require(utils)
# Extract data file
unzip('./Electric_data.zip',
exdir = './')
# Extract data file
unzip('./Electric_data.zip',
exdir = '.')
# Extract data file
unzip('./Electric_data.zip')
file.exists('./Eletric_data.zip')
# download and load data
fileUrl <- 'https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip'
download.file(fileUrl,
destfile = './Eletric_data.zip',
method = 'curl', quiet = T)
if(file.exists('./Eletric_data.zip')) {
# Extract data file
unzip('./Eletric_data.zip')
# Delete original Zip file if it exists
invisible(file.remove('./Eletric_data.zip'))
}
data <- read.table('household_power_consumption.txt')
# libraries
require(utils)
# download and load data
fileUrl <- 'https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip'
download.file(fileUrl,
destfile = './Eletric_data.zip',
method = 'curl', quiet = T)
if(file.exists('./Eletric_data.zip')) {
# Extract data file
unzip('./Eletric_data.zip')
# Delete original Zip file if it exists
invisible(file.remove('./Eletric_data.zip'))
}
data <- read.table('household_power_consumption.txt')
memory.size(data)
head(data)
data <- read.table('household_power_consumption.txt', header = T,
sep = ';')
data$Date
class(data$Date)
data <- subset(data, Date %in% c('2007-02-01', '2007-02-02'))
data <- read.table('household_power_consumption.txt', header = T,
sep = ';')
data$Date == '2007-02-01'
any(data$Date == '2007-02-01')
data$Date
data <- subset(data, Date %in% c('01/02/2007', '02/02/2007'))
data <- read.table('household_power_consumption.txt', header = T,
sep = ';')
data <- subset(data, Date %in% c('1/2/2007', '2/2/2007'))
data$Global_active_power
levels(data$Global_active_power)
any(data$Global_active_power == '?')
any(data == '?')
any(data$Global_reactive_power == '?')
any(data$Sub_metering_1 == '?')
any(data$Voltage == '?')
# Delete data file .txt
if(file.exists('./household_power_consumption.txt')) {
invisible(file.remove('./household_power_consumption.txt'))
}
require(swirl)
swirl()
head(airquality)
xyplot(Ozone~Wind, data = airquality)
xyplot(Ozone~Wind, data = airquality, col = 'red', pch = 8, main = 'Big Apple Data')
xyplot(Ozone ~ Wind, data = airquality, pch=8, col="red", main="Big Apple Data")
xyplot(Ozone~Wind | as.factor(Month), data = airquality, layout = c(5,1))
xyplot(Ozone~Wind | Month, data = airquality, layout = c(5,1))
xyplot(Ozone~Wind,data=airquality)
p <- xyplot(Ozone~Wind,data=airquality)
p
names(p)
mynames[myfull]
p[["fomula"]]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y~x|f, layout = c(2,1))
v1
v2
myedit("plot1.R")
pathtofile('plot1.R')
pathtofile('plot1.R', local = TRUE)
source(pathtofile('plot1.R'), local = TRUE)
myedit("plot2.R")
source(pathtofile('plot2.R'), local = TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit("myLabels.R")
source(pathtofile('myLabels.R'), local = TRUE)
xyplot(price~carat | color*cut, data = diamonds, strip = FALSE, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
xyplot(price~carat | color*cut, data = diamonds, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
sample(colors(10))
sample(colors(), 10)
colorRamp(c('red','blue'))
pal <- colorRamp(c('red','blue'))
pal(0)
pal(1)
pal(seq(0,1,len=6))
p1 <- colorRampPalette(c("red","blue"))
p1(2)
p1(6)
0xcc
p2 <- colorRampPalette(c("red","yellow"))
p2(2)
p2(10)
showMe(p1(10))
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?fun
?rgb
b
rgb
p3 <- colorRampPalette(c("blue","green"),alpha=.5))
p3 <- colorRampPalette(c("blue","green"),alpha=.5)
p3(5)
rgb
plot(x,y,pch=19,col=rgb(0,.5,.5))
rgb
plot(x,y,pch=19,col=rgb(0,.5,.5,.3))
cols <- brewer.pal(3, 'BuGn')
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(3))
showMe(pal(20))
image(volcano, col = pal(20))
image(volcano, col = p1(20))
str(mpg)
qplot(displ, hwy, mpg)
qplot
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, aes(color = drv))
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = drv, geom = c("point", "smooth"))
qplot(y = hwy, data = mpg, color = drv)
myhigh
qplot(drv, hwy, data = mpg, geoom = 'boxplot')
qplot(drv, hwy, data = mpg, geom = 'boxplot')
qplot(drv, hwy, data = mpg, geom = 'boxplot', color = manufacturer)
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets = .~drv)
qplot(hwy, data = mpg, facets =.~drv, binwidth = 2)
qplot(hwy, data = mpg, facets = drv ~ ., binwidth = 2)
qplot
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv)
qplot
g <- ggplot(mpg, aes(displ,hwy) )
g
summary(g)
print(g)
g+geom_point()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(method = 'lm')
g+geom_point()+geom_smooth(method = 'lm') + facet_grid(.~drv)
g+geom_point()+geom_smooth(method = 'lm') + facet_grid(.~drv)+ggtitle('Swirl Rules!')
g+geom_point(color = 'pink', size = 4, alpha = 1/2)
g+geom_point(size =4, alpha = 1/2, color = drv)
g+geom_point(size =4, alpha = 1/2, aes(color = drv))
g+geom_point(aes(color = drv)) + labs(title = "Swirl Rules!", x = "Displacement")
g+geom_point(aes(color = drv)) + labs(title = "Swirl Rules!", x = "Displacement", y = "Hwy Mileage")
g+geom_point(aes(color = drv)) + labs(title = "Swirl Rules!") + labs(x = "Displacement", y = "Hwy Mileage")
qplot
g + geom_point(aes(color = drv),size=2,alpha=1/2) +geom_smooth(size=4,linetype=3,method="lm",se=FALSE)
qplot
g + geom_point(aes(color = drv)) + theme_bw(base_family="Times")
qplot
plot(myx, myy, type = "l", ylim = c(-3,3))
qplot
g <- ggplot(testdat, aes(x = myx, y = myy))
g+geom_line()
qplot
g + geom_line() + ylim(-3,3)
qplot
g + geom_line() + coord_cartesian(ylim=c(-3,3))
qplot
g <- ggplot(mpg,aes(x=displ,y=hwy,color=factor(year)))
qplot
g + geom_point()
qplot
g + geom_point() + facet_grid(drv~cyl,margins=TRUE)
pqlot
qplot
g + geom_point() + facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",size=2,se=FALSE,color="black")
qplot
g + geom_point() + facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",size=2,se=FALSE,color="black")+labs(x="Displacement",y="Highway Mileage",title="Swirl Rules!")
str(diamonds)
qplot
qplot(price,data=diamonds)
qplot
range(diamonds$price)
qplot
qplot(price,data=diamonds,binwidth=18497/30)
qplot
brk
qplot
counts
qplot
qplot(price,data=diamonds,binwidth=18497/30,fill=cut)
qplot
qplot(price,data=diamonds,geom="density")
qplot
qplot(price,data=diamonds,geom="density",color=cut)
qplot
qplot(carat,price,data=diamonds)
qplot
qplot(carat,price,data=diamonds, shape=cut)
qplot
qplot(carat,price,data=diamonds, color=cut)
qplot
qplot(carat,price,data=diamonds, color=cut) + geom_smooth(method="lm")
qplot
qplot(carat,price,data=diamonds, color=cut, facets=.~cut) +geom_smooth(method="lm")
qplot
g <- ggplot(diamonds,aes(depth,price))
summary(g)
qplot
g+geom_point(alpha=1/3)
qplot
cutpoints <- quantile(diamonds$carat,seq(0,1,length=4),na.rm=TRUE)
qplot
cutpoints
qplot
diamonds$car2 <- cut(diamonds$carat,cutpoints)
qplot
g <- ggplot(diamonds,aes(depth,price))
qplot
g+geom_point(alpha=1/3)+facet_grid(cut~car2)
qplot
diamonds[myd,]
qlpot
qplot
g+geom_point(alpha=1/3)+facet_grid(cut~car2)+geom_smooth(method="lm",size=3,color="pink")
qplot
ggplot(diamonds,aes(carat,price))+geom_boxplot()+facet_grid(.~cut)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
# libraries
require(utils)
# download, load data and subset
fileUrl <- 'https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip'
download.file(fileUrl,
destfile = './Eletric_data.zip',
method = 'curl', quiet = T)
if(file.exists('./Eletric_data.zip')) {
# Extract data file
unzip('./Eletric_data.zip')
# Delete original Zip file if it exists
invisible(file.remove('./Eletric_data.zip'))
}
data <- read.table('household_power_consumption.txt',
header = T, sep = ';',stringsAsFactors = F)
data <- subset(data, Date %in% c('1/2/2007', '2/2/2007'))
# Delete data file .txt
if(file.exists('./household_power_consumption.txt')) {
invisible(file.remove('./household_power_consumption.txt'))
}
# Create the png
png('./plot1.png') # default is 480px X 480px
# Make Plot 1
with(data, hist(as.numeric(Global_active_power), col = 'red',
xlab = 'Global Active Power (kilowatts)',
main = 'Global Active Power'))
# Close png file
dev.off()

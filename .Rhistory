survmean(Surv(time, delta)~1, data = claringe)
gamma(2)
survp <- ggsurvplot(ekm, data = claringe,
conf.int=.95, legend = 'none',
xlab = 'Tempo (anos)', ylab = 'Probabilidade de Sobrevivência',
surv.median.line = "hv",
font.x = c(13, "bold", "black"),
font.y = c(13, "bold", "black"),
pval = "The hot p-value is: 0.031")
survp
surv_median(ekm)
surv_median(ekm)$median
survp <- ggsurvplot(ekm, data = claringe,
conf.int=.95, legend = 'none',
xlab = 'Tempo (anos)', ylab = 'Probabilidade de Sobrevivência',
surv.median.line = "hv",
font.x = c(13, "bold", "black"),
font.y = c(13, "bold", "black"),
pval = paste0('Tempo mediano = ',
surv_median(ekm)$median, '\n a'))
survp
survp <- ggsurvplot(ekm, data = claringe,
conf.int=.95, legend = 'none',
xlab = 'Tempo (anos)', ylab = 'Probabilidade de Sobrevivência',
surv.median.line = "hv",
font.x = c(13, "bold", "black"),
font.y = c(13, "bold", "black"),
pval = paste0('Tempo Mediano = ',
surv_median(ekm)$median,
'\nTempo Médio = '))
survp
survp <- ggsurvplot(ekm, data = claringe,
conf.int=.95, legend = 'none',
xlab = 'Tempo (anos)', ylab = 'Probabilidade de Sobrevivência',
surv.median.line = "hv",
font.x = c(13, "bold", "black"),
font.y = c(13, "bold", "black"),
pval = paste0('Tempo Mediano = ',
surv_median(ekm)$median,
'\nTempo Médio = '))
survp
sort(claringe$time)
mapply(function(tempo, delta) {
c(tempo, delta)
}, ekm$time, ekm$delta)
ekm <- survfit(with(claringe, Surv(time, delta)~1))
mapply(function(tempo, delta) {
c(tempo, delta)
}, ekm$time, ekm$delta)
mapply(function(tempo, delta) {
c(tempo, delta)
}, tempo = ekm$time, delta = ekm$delta)
mapply(function(tempo, delta) {
print(tempo, delta)
}, tempo = ekm$time, delta = ekm$delta)
mapply(function(tempo, delta) {
tempo[1]
}, tempo = ekm$time, delta = ekm$delta)
mapply(function(tempo, delta) {
tempo[1]
}, tempo = claringe$time, delta = claringe$delta)
mapply(function(tempo, delta) {
c(tempo, delta)
}, tempo = claringe$time, delta = claringe$delta)
tmp <- claringe$time[claringe$delta == 1]
tmp_j <- c(0, sort(unique(tmp)))
tmp_j
ekm$surv
surv <- c(1, ekm$surv)
tmp <- claringe$time[claringe$delta == 1]
tmp_j <- c(0, sort(unique(tmp)))
surv <- c(1, unique(ekm$surv))
surv <- sort(surv, decreasing = T)
k <- length(tmp_j) - 1
prod <- matrix(0, k, 1)
for(j in 1:k) {
prod[j] <- (tmp_j[k+1]-tmp_j[k])*surv[j]
}
tm <- sum(prod)
tm
tmp <- claringe$time[claringe$delta == 1]
tmp_j <- c(0, sort(unique(tmp)))
surv <- c(1, sort(unique(ekm$surv), decreasing = T))
k <- length(tmp_j) - 1
tm <- 0
for(j in 1:k) {
tm <-tm + (tmp_j[k+1]-tmp_j[k])*surv[j]
}
tm
tmp <- claringe$time[claringe$delta == 1]
tmp_j <- c(0, sort(unique(tmp)))
surv <- c(1, sort(unique(ekm$surv), decreasing = T))
k <- length(tmp_j) - 1
tm <- 0
for(j in 1:k) {
tm <-tm + (tmp_j[k+1]-tmp_j[k])*surv[j]
}
tm
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
require(KMsurv)
require(tidyverse)
require(survival)
require(survminer)
data("larynx")
ena <- survfit(with(claringe, coxph(Surv(time, delta)~1, method = 'breslow')))
exp(2.022)
length(claringe$time)
length(ekm$surv)
fitg <- flexsurvreg(with(claringe, Surv(time, delta))~1,
dist = "gengamma.orig")
claringe <- larynx %>% select(time, delta)
dim(claringe)
ekm <- survfit(with(claringe, Surv(time, delta)~1))
dtable <- bind_cols(`Tempo` = ekm$time, `#Risco` = ekm$n.risk,
`#Falha` = ekm$n.event, `Sobrevivência S(t)` = ekm$surv,
`Erro padrão` = ekm$std.err, `LI IC 95%` = ekm$lower,
`LS IC 95%` = ekm$upper)
knitr::kable(head(dtable, 35), "simple")
tmp <- claringe$time[claringe$delta == 1]
tmp_j <- c(0, sort(unique(tmp)))
surv <- c(1, sort(unique(ekm$surv), decreasing = T))
k <- length(tmp_j) - 1
tm <- 0
for(j in 1:k) {
tm <-tm + (tmp_j[k+1]-tmp_j[k])*surv[j]
}
tm
survp <- ggsurvplot(ekm, data = claringe,
conf.int=.95, legend = 'none',
xlab = 'Tempo (anos)', ylab = 'Probabilidade de Sobrevivência',
surv.median.line = "hv",
font.x = c(13, "bold", "black"),
font.y = c(13, "bold", "black"),
pval = paste0('Tempo Mediano = ',
surv_median(ekm)$median))
survp
ena <- survfit(with(claringe, coxph(Surv(time, delta)~1, method = 'breslow')))
dtable <- bind_cols(`Tempo` = ena$time, `#Risco` = ekm$n.risk,
`#Falha` = ekm$n.event, `Sobrevivência S(t)` = ekm$surv,
`Erro padrão` = ekm$std.err, `LI IC 95%` = ekm$lower,
`LS IC 95%` = ekm$upper)
knitr::kable(head(dtable, 35), "simple")
tmp <- claringe$time[claringe$delta == 1]
tmp_j <- c(0, sort(unique(tmp)))
surv <- c(1, sort(unique(ena$surv), decreasing = T))
k <- length(tmp_j) - 1
tm <- 0
for(j in 1:k) {
tm <-tm + (tmp_j[k+1]-tmp_j[k])*surv[j]
}
tm
survp <- ggsurvplot(ena, data = claringe,
conf.int=.95, legend = 'none',
xlab = 'Tempo (anos)', ylab = 'Probabilidade de Sobrevivência',
surv.median.line = "hv",
font.x = c(13, "bold", "black"),
font.y = c(13, "bold", "black"),
pval = paste0('Tempo Mediano = ',
surv_median(ena)$median))
survp
ajuste_exp <- survreg(with(claringe, Surv(time, delta))~1,
dist = "exponential")
summary(ajuste_exp)
alphae <- exp(ajuste_exp$coefficients[1])
alphae
ajuste_weib <- survreg(with(claringe, Surv(time, delta))~1,
dist = "weibull")
summary(ajuste_weib)
alpha <- exp(ajuste_weib$coefficients[1])
gama <- 1/ajuste_weib$scale
c(alpha, gama)
ajuste_lnorm <- survreg(with(claringe, Surv(time, delta))~1,
dist = "lognorm")
summary(ajuste_lnorm)
mu <- ajuste_lnorm$coefficients[1]
sigma <- ajuste_lnorm$scale
c(mu, sigma)
tempo <- ekm$time
st <- ekm$surv
st_exp <- exp(-tempo/alphae)
st_weib <- exp(-(tempo/alpha)^gama)
st_lnorm <- pnorm((-log(tempo)+mu)/sigma)
cbind(tempo, st, st_exp, st_weib, st_lnorm)
par(mfrow = c(1, 3))
plot(st, st_exp, pch = 16, ylim = range(c(0,1)), xlim = range(c(0,1)),
xlab = "S(t) Kaplan-Meier", ylab = "S(t): exponencial")
lines(c(0,1), c(0,1), type = 'l', lty = 1)
plot(st, st_weib, pch = 16, ylim = range(c(0,1)), xlim = range(c(0,1)),
xlab = "S(t) Kaplan-Meier", ylab = "S(t): weibull")
lines(c(0,1), c(0,1), type = 'l', lty = 1)
plot(st, st_lnorm, pch = 16, ylim = range(c(0,1)), xlim = range(c(0,1)),
xlab = "S(t) Kaplan-Meier", ylab = "S(t): log-normal")
lines(c(0,1), c(0,1), type = 'l', lty = 1)
par(mfrow = c(1,3))
invst <- qnorm(st)
plot(tempo, -log(st), pch = 16, xlab = "Tempos", ylab = "-log(S(t))")
plot(log(tempo), log(-log(st)), pch = 16, xlab = "log(tempos)",
ylab = "log(-log(S(t)))")
plot(log(tempo), invst, pch = 16, xlab = "log(tempos)", ylab = "")
fitg <- flexsurvreg(with(claringe, Surv(time, delta))~1,
dist = "gengamma.orig")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
require(KMsurv)
require(tidyverse)
require(survival)
require(survminer)
require(flexsurv)
data("larynx")
par(mfrow = c(1,2))
plot(ekm, conf.int = F, xlab = "Tempos", ylab = "S(t)")
lines(c(0, sort(unique(claringe$time))), c(1, st_weib), lty = 2)
legend(18, 0.8, lty = c(1,2), c("Kaplan-Meyer", "Weibull"), bty = "n",
cex = 0.8)
plot(ekm, conf.int = F, xlab = "Tempos", ylab = "S(t)")
lines(c(0, sort(unique(claringe$time))), c(1, st_lnorm), lty = 2)
legend(18, 0.8, lty = c(1,2), c("Kaplan-Meyer", "Log-Normal"), bty = "n",
cex = 0.8)
surv_median(st_lnorm)
?survreg
predict(st_exp, type = "quantile", p = .5, newdata = data.frame(1))
surv_median(st_exp)
predict(st_exp, type = "quantile", p = .5, newdata = claringe)
st_exp
surv_median(ajuste_lnorm)$median
surv_median(ajuste_lnorm)
ajuste_lnorm
predict(ajuste_exp, type = "quantile", p = .5, newdata = claringe)
predict(ajuste_exp, type = "quantile", p = .5, newdata = data.frame([1]))
predict(ajuste_exp, type = "quantile", p = .5, newdata = data.frame(1))
predict(ekm type = "quantile", p = .5, newdata = data.frame(1))
predict(ekm, type = "quantile", p = .5, newdata = data.frame(1))
predict(ena, type = "quantile", p = .5, newdata = data.frame(1))
predict(ajuste_lnorm, type = "quantile", p = .5, newdata = data.frame(1))
exp(mu+(sigma^2/2))
predict(ajuste_exp, type = "quantile", p = .5, newdata = data.frame(1))
alpha
1/alpha
alpha
alpha*12
alpha/12
require(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
require(swirl)
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(pollution$pm25)
quantile(ppm)
boxplot(ppm, col = 'blue')
abline(h = 12)
hist(ppm, col = 'green')
rug(ppm)
low
high
hist(ppm, col = 'green', breaks = 100)
rug(ppm)
hist(ppm, col = 'green')
abline(v = 12)
abline(v = 12, lwd = 2)
abline(v = meadian(ppm), col = 'magenta' lwd = 4)
abline(v = median(ppm), col = 'magenta' lwd = 4)
abline(v = median(ppm), col = 'magenta', lwd = 4)
names(pollution)
table(pollution$region)
reg <- table(pollution$region)
reg
barplot(reg)
barplot(reg, col = 'wheat', main = "Number of Counties in Each Region")
boxplot(pm25~region, data = pollution, col = 'red')
par(mfrow=c(2,1),mar=c(4,4,2,1))
east <- subset(pollution, region == 'east')
head(east)
hist(east, col = 'green')
hist(east$pm25, col = 'green')
histogram((subset(pollution, region == 'west'))$regions, col = 'green')
hist((subset(pollution, region == 'west'))$regions, col = 'green')
hist((subset(pollution, region == 'west'))$pm25, col = 'green')
hist(subset(pollution, region == 'west')$pm25, col = 'green')
plot(pollution)
plot(latitude, pm25)
with(pollution, plot(latitude, pm25))
abline(h = 12, lwd = 2, lty 2)
abline(h = 12, lwd = 2, lty = 2)
plot(pollution$latitude, pollution$pm25)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h = 12, lwd = 2, lty = 2)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west <- subset(pollution, region = 'west')
west <- subset(pollution, region == 'west')
plot(west$latitude, west$pm25, main = 'West')
plot(west$latitude, west$pm25, main = 'Eest')
plot(east$latitude, east$pm25, main = "East")
?Devices
a
plot(a)
plot(pollution)
with(faithful, plot(eruptions, waiting))
with(faithful, plot(eruptions, waiting, main = 'Old Faithful Geyser data'))
title(main = "Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png, 'geyserplot.png')
dev.copy(png, file = "geyserplot.png")
dev.off()
head(cars)
which(cars, plot(speed, dist))
with(cars, plot(speed, dist))
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4,1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, data = mpg)
head(airquality)
range(airquality$ozone, na.rm = TRUE)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month, airquality)
dev.off()
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)",col.axis="blue",col.lab="red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)",col.axis="blue",col.lab="red", main = "Ozone and Wind in New York City")
title(main="Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
title("Ozone and Wind in New York City")
length(par())
names(par())
par()$bin
par()$bin
par()$pin
par()$fg
par('pch')
par('lty')
plot(airquality$Wind, airquality$Ozone, type = "n")
title("Wind and Ozone in NYC")
may <- subset(airquality, Month == 5)
plot(may$Wind, may$Ozone, color = 'blue', type = 2)
plot(may$Wind, may$Ozone, col = 'blue', type = 2)
plot(may$Wind, may$Ozone, col = 'blue')
plot(may$Wind, may$Ozone, col = 'blue', pch = 17)
plot(may$Wind,may$Ozone,col='blue,pch=17)
)
a
plot(may$Wind,may$Ozone,col='blue',pch=17)
plot(may$Wind,may$Ozone,col="blue",pch=17)
points(may$Wind,may$Ozone,col="blue",pch=17)
notmay <- subset(airquality, Month != 5)
points(notmay$Wind,notmay$Ozone,col="red",pch=17)
points(notmay$Wind,notmay$Ozone,col="red",pch=8)
legend('topright', c(17,8), c('blue', 'red'), c('May', 'Other Months'))
legend('topright', pch = c(17,8), col = c('blue', 'red'), legend = c('May', 'Other Months'))
abline(v = median(airquality$Wind), lty = 2, lwd = 2)
par(mfrow = c(1,2))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
title("Ozone and Solar Radiation")
plot(airquality$Wind, airquality$Solar, main = "Ozone and Solar Radiation")
plot(airquality$Ozone, airquality$Solar, main = "Ozone and Solar Radiation")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Solar, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City")
mtext("Ozone and Weather in New York City", outer = TRUE)
require(lubridate)
ymd('2020 10 10')
class(ymd('2020 10 10'))
# download and load data
fileUrl <- 'https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip'
download.file(fileUrl,
destfile = './data',
method = 'curl', quiet = T)
setwd("C:/Users/Daniel/Desktop/Coursera JHU/ExData_Plotting1")
# download and load data
fileUrl <- 'https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip'
download.file(fileUrl,
destfile = './data',
method = 'curl', quiet = T)
# download and load data
fileUrl <- 'https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip'
download.file(fileUrl,
destfile = './data/Eletric_data.csv',
method = 'curl', quiet = T)
download.file(fileUrl,
destfile = './Eletric_data.csv',
method = 'curl', quiet = T)
data <- read.csv2('Eletric_data.csv')
data <- read.csv('Eletric_data.csv')
# download and load data
fileUrl <- 'https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip'
download.file(fileUrl,
destfile = './Eletric_data.zip',
method = 'curl', quiet = T)
# download and load data
fileUrl <- 'https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip'
download.file(fileUrl,
destfile = './Eletric_data.zip',
method = 'curl', quiet = T)
if(file.exists('./Eletric_data.zip')) {
# Extract data file
unzip('./Electric_data.zip',
exdir = './')
# Delete original Zip file if it exists
invisible(file.remove('./Electric_data.zip'))
}
if(file.exists('./Eletric_data.zip')) {
# Extract data file
unzip('./Electric_data.zip',
exdir = '.')
# Delete original Zip file if it exists
invisible(file.remove('./Electric_data.zip'))
}
if(file.exists('./Eletric_data.zip')) {
# Extract data file
unzip('Electric_data.zip',
exdir = '.')
# Delete original Zip file if it exists
invisible(file.remove('./Electric_data.zip'))
}
file.exists('./Eletric_data.zip')
unzip('./Electric_data.zip',
exdir = '.')
# Extract data file
unzip('./Electric_data.zip',
exdir = 'a.txt')
# Delete original Zip file if it exists
invisible(file.remove('./Electric_data.zip'))
# Extract data file
unzip('./Electric_data.zip',
exdir = 'a.txt')
# Extract data file
unzip('./Electric_data.zip',
exdir = './')
?unzip
# libraries
require(utils)
# Extract data file
unzip('./Electric_data.zip',
exdir = './')
# Extract data file
unzip('./Electric_data.zip',
exdir = '.')
# Extract data file
unzip('./Electric_data.zip')
file.exists('./Eletric_data.zip')
# download and load data
fileUrl <- 'https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip'
download.file(fileUrl,
destfile = './Eletric_data.zip',
method = 'curl', quiet = T)
if(file.exists('./Eletric_data.zip')) {
# Extract data file
unzip('./Eletric_data.zip')
# Delete original Zip file if it exists
invisible(file.remove('./Eletric_data.zip'))
}
data <- read.table('household_power_consumption.txt')
# libraries
require(utils)
# download and load data
fileUrl <- 'https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip'
download.file(fileUrl,
destfile = './Eletric_data.zip',
method = 'curl', quiet = T)
if(file.exists('./Eletric_data.zip')) {
# Extract data file
unzip('./Eletric_data.zip')
# Delete original Zip file if it exists
invisible(file.remove('./Eletric_data.zip'))
}
data <- read.table('household_power_consumption.txt')
memory.size(data)
head(data)
data <- read.table('household_power_consumption.txt', header = T,
sep = ';')
data$Date
class(data$Date)
data <- subset(data, Date %in% c('2007-02-01', '2007-02-02'))
data <- read.table('household_power_consumption.txt', header = T,
sep = ';')
data$Date == '2007-02-01'
any(data$Date == '2007-02-01')
data$Date
data <- subset(data, Date %in% c('01/02/2007', '02/02/2007'))
data <- read.table('household_power_consumption.txt', header = T,
sep = ';')
data <- subset(data, Date %in% c('1/2/2007', '2/2/2007'))
data$Global_active_power
levels(data$Global_active_power)
any(data$Global_active_power == '?')
any(data == '?')
any(data$Global_reactive_power == '?')
any(data$Sub_metering_1 == '?')
any(data$Voltage == '?')
# Delete data file .txt
if(file.exists('./household_power_consumption.txt')) {
invisible(file.remove('./household_power_consumption.txt'))
}
